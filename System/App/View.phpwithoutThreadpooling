<?php
namespace System\App;

use System\Preload\SystemExc;

class View {
    protected $File = '';
    protected $FilePath = '';
    public $Content = '';
    protected $Data = [];
    protected $ReturnContent = false;
    protected $Cache = []; // Internal cache
    const ERROR_CODE = 1404;

    function __construct(string $File, array $Data = [], bool $ReturnContent = false, bool $IsForSystem = false) {
        try {
            $this->File = $this->PrepareFileName($File);
            $this->FilePath = $this->GetFilePath($this->File, $IsForSystem);

            if (!$this->isFileValid($this->FilePath)) {
                throw new SystemExc('View Not Found @ ' . $this->FilePath, self::ERROR_CODE);
            }

            $this->Data = $Data;
            $this->ReturnContent = $ReturnContent;
        } catch (SystemExc $E) {
            $this->HandleError($E);
        }
    }

    private function isFileValid(string $FilePath): bool {
        return file_exists($FilePath);
    }

    private function PrepareFileName(string $File): string {
        return !empty($File) ? trim(trim(trim($File), '/'), '.php') . '.php' : throw new SystemExc('View not calling', self::ERROR_CODE);
    }

    private function GetFilePath(string $File, bool $IsForSystem): string {
        $BasePath = $IsForSystem ? System : App;
        return $BasePath . 'View' . DS . $File;
    }

    public function HTML($Data): string {
        return is_array($Data) ? array_map([$this, 'HTML'], $Data) : htmlentities((string)$Data);
    }

    public function Render(): string {
        return html_entity_decode($this->Content());
    }

    public function Content(): string {
        $CacheKey = 'view_' . md5($this->FilePath);
    
        // Check if cached content exists and validate it
        if (isset($this->Cache[$CacheKey])) {
            // Check if the file has been modified since caching
            if (filemtime($this->FilePath) > $this->Cache[$CacheKey]['time']) {
                unset($this->Cache[$CacheKey]);
            } else {
                return $this->Cache[$CacheKey]['content'];
            }
        }
    
        try {
            if ($this->isFileValid($this->FilePath)) {
                ob_start();
                include $this->FilePath; // Avoid variable collisions by passing data explicitly
                $Output = ob_get_clean();
    
                // Cache the output with the current file modification time
                $this->Cache[$CacheKey] = [
                    'content' => $this->ReturnContent ? $this->HTML($Output) : $Output,
                    'time' => filemtime($this->FilePath)
                ];
    
                return $this->Cache[$CacheKey]['content'];
            }
            throw new SystemExc('File does not exist at path: ' . $this->FilePath, self::ERROR_CODE);
        } catch (SystemExc $E) {
            $this->HandleError($E);
            return ''; // Return empty content if an error occurs
        }
    }
    

    private function HandleError(SystemExc $E) {
        // Log the error or perform any necessary cleanup
        $E->Response($E);
    }

    function __destruct() {
        // Optional: Clean-up code if needed
    }
}
